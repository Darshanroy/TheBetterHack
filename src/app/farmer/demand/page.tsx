
"use client";

import { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2, LandPlot, Sparkles } from 'lucide-react';
import { summarizeCropDemand, type SummarizeCropDemandInput, type SummarizeCropDemandOutput } from '@/ai/flows/summarize-crop-demand';
import { useToast } from '@/hooks/use-toast';

// Example dummy data for crop demand requests (India/Bangalore focused)
const dummyRequests = [
  { crop: 'Tomatoes (Nati)', quantity: 50, location: 'Koramangala, Bangalore' },
  { crop: 'Onions (Small/Sambar)', quantity: 100, location: 'Malleshwaram, Bangalore' },
  { crop: 'Mangoes (Alphonso)', quantity: 200, location: 'Mumbai, MH' }, // Example outside Bangalore
  { crop: 'Tomatoes (Nati)', quantity: 30, location: 'Indiranagar, Bangalore' },
  { crop: 'Drumsticks (Moringa)', quantity: 80, location: 'Chennai, TN' }, // Example outside Bangalore
  { crop: 'Tender Coconut', quantity: 150, location: 'Jayanagar, Bangalore'},
];

// Update SummarizeCropDemandInputSchema in the AI flow if needed to better handle Indian units (e.g., kg, bunch, dozen)
// For now, assuming 'quantity' is understood contextually or in generic units.

export default function CropDemandPage() {
  const [requests, setRequests] = useState(dummyRequests); // In real app, fetch this data
  const [summary, setSummary] = useState<string | null>(null);
  const [isLoadingSummary, setIsLoadingSummary] = useState(false);
  const { toast } = useToast();

  const handleSummarizeDemand = async () => {
    setIsLoadingSummary(true);
    setSummary(null); // Clear previous summary
    try {
      const input: SummarizeCropDemandInput = { cropDemandRequests: requests };
      const result: SummarizeCropDemandOutput = await summarizeCropDemand(input);
      setSummary(result.summary);
      toast({
        title: "Demand Summarized!",
        description: "AI generated a summary of current crop demands.",
      });
    } catch (error) {
      console.error("Failed to summarize crop demand:", error);
       toast({
        title: "AI Error",
        description: "Failed to generate demand summary. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoadingSummary(false);
    }
  };


  return (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div>
             <h1 className="text-3xl font-bold text-primary flex items-center gap-2">
                 <LandPlot /> Crop Demand Requests
             </h1>
             <p className="text-muted-foreground">View requests from consumers for specific fruits and vegetables across locations.</p>
          </div>
           <Button onClick={handleSummarizeDemand} disabled={isLoadingSummary || requests.length === 0}>
              {isLoadingSummary ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                 <Sparkles className="mr-2 h-4 w-4 text-accent" />
              )}
              Summarize with AI
           </Button>
      </div>


        {isLoadingSummary && (
            <Card className="animate-pulse">
                <CardHeader>
                    <CardTitle>Demand Summary</CardTitle>
                    <CardDescription>AI is analyzing the requests...</CardDescription>
                </CardHeader>
                <CardContent className="space-y-2">
                    <div className="h-4 bg-muted rounded w-3/4"></div>
                    <div className="h-4 bg-muted rounded w-1/2"></div>
                    <div className="h-4 bg-muted rounded w-2/3"></div>
                </CardContent>
            </Card>
        )}

       {summary && !isLoadingSummary && (
        <Card>
          <CardHeader>
            <CardTitle>Demand Summary</CardTitle>
             <CardDescription>Generated by AI based on current requests.</CardDescription>
          </CardHeader>
          <CardContent>
            <p className="text-sm whitespace-pre-wrap">{summary}</p>
          </CardContent>
        </Card>
      )}

      <Card>
        <CardHeader>
          <CardTitle>Current Requests ({requests.length})</CardTitle>
           <CardDescription>List of active crop demand requests from various locations.</CardDescription>
        </CardHeader>
        <CardContent>
          {requests.length > 0 ? (
             <ul className="space-y-3">
              {requests.map((req, index) => (
                <li key={index} className="flex justify-between items-center p-3 border rounded-md bg-secondary/30">
                  <div>
                     <span className="font-medium">{req.crop}</span>
                     <span className="text-sm text-muted-foreground ml-2">({req.quantity} units)</span>
                  </div>
                  <span className="text-sm text-muted-foreground">{req.location}</span>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-muted-foreground text-center py-4">No active crop demand requests.</p>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

    